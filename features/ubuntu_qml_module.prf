# Provides a feature file for easy handling of
# qml module dependencies that are not compiled.
#
# To automatically copy and update qml/js/whatever files in the
# builddirectory, its possible to add them to the UBUNTU_QML_MODULE_FILES
# variable in 2 different ways:
#
# 1) Just as a wildcard or filename:
#     UBUNTU_QML_MODULE_FILES += *.qml \
#                                *.js \
#                                *.png
#
# 2) By adding them in a structure which provides more functionality:
#
#     # specifying a install path will automatically create a install target
#     # and install all files specified in the .files subvar
#     mymodule.installPath="/path/to/install"
#
#     # The required files
#     mymodule.files=*.qml \
#                    *.js \
#                    *.png
#
#     # This will add a dependency to the internally created target
#     mymodule.depends=someothertarget
#
# Note: The files are automatically added to OTHER_FILES so they are visible in the QtC project tree
#
# WARNING: Use only files that are part of the project tree, otherwise the buildfile could be copied to a place
#          outside of the buildfolder

defineReplace(qmlModStripSrcDir) {
    return($$relative_path($$1, $$_PRO_FILE_PWD_))
}

defineReplace(expandFilePath) {
    allfiles=
    for(curr,1) {
        RESULT = $$find(curr, "^/")
        count(RESULT, 0){
            allfiles += $$files($$_PRO_FILE_PWD_/$$curr)
        } else {
            #absolute path
            allfiles += $$files($$curr)
        }
    }

    return($$allfiles)
}

defineReplace(generateUuid) {
    _uuid = $$system(uuidgen)
    isEmpty(_uuid): error("Could not create a UUID, uuidgen is required to build this project.")
    return($${_uuid})
}

defineReplace(readVarValueByName) {
    eval("_value=\$\$$${1}")
    return($$_value)
}

for(qml_module, UBUNTU_QML_MODULE_FILES){

    filelist=
    defined($${qml_module}.files,var) {
        _files=$$readVarValueByName($${qml_module}.files)
        filelist+=$$_files
    } else {
        filelist+=$$qml_module
    }

    #make QtCreator show our files
    OTHER_FILES += $${filelist}

    #copy files only when shadowbuilding
    !equals(PWD, $$shadowed($${PWD})) {

        #make sure we only have absolute path entries in our list
        filelist=$$expandFilePath($${filelist})
        filelist=$$unique(filelist)

        for(copyf, filelist) {
            #add a suffix to the variable name to make sure its unique
            _varname = $$generateUuid()

            #make sure the file is copied again when it changes
            _qml_mod_sourcetarget$${_varname}.target   = $$copyf
            _qml_mod_sourcetarget$${_varname}.commands =

            target_name       = "$${OUT_PWD}/$$qmlModStripSrcDir($${copyf})"
            target_dir        = $$dirname(target_name)

            _qml_mod_target$${_varname}.target   = $$target_name
            _qml_mod_target$${_varname}.commands = $$QMAKE_MKDIR $${target_dir} && $$QMAKE_COPY $${copyf} $$target_name
            _qml_mod_target$${_varname}.depends  = $$copyf

            defined($${qml_module}.depends,var) {
                _depends = $$readVarValueByName($${qml_module}.depends)
                _qml_mod_target$${_varname}.depends += $$_depends
            }

            QMAKE_EXTRA_TARGETS += _qml_mod_sourcetarget$${_varname} _qml_mod_target$${_varname}
            PRE_TARGETDEPS += $$target_name
        }
    }

    defined($${qml_module}.installPath,var) {

        #add a suffix to the variable name to make sure its unique
        _varname = $$generateUuid()
        _installPath=$$readVarValueByName($${qml_module}.installPath)
        _files=$$readVarValueByName($${qml_module}.files)

        qml_files_$${_varname}.path  = $$_installPath
        qml_files_$${_varname}.files = $$_files

        INSTALLS += qml_files_$${_varname}
    }
}
