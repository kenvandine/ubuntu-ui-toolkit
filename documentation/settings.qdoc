/*
 * Copyright 2014 Canonical Ltd.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; version 3.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*!
  \page ubuntu-settings.html
  \title Application Settings

  Typically applications have a few user-facing options that customize the UI or
  change behavior for different use cases. Let's start with a simple example:

  \qml
    import QtQuick 2.0
    import Ubuntu.Components 0.1

    MainView {
        applicationName: "example"
        width: units.gu(80)
        height: units.gu(60)

        Settings {
            Option {
                id: optionVibrate
                name: "vibrate"
                defaultValue: false
            }
        }

        Switch {
            action: optionVibrate
        }
    }
  \endqml

  In a new application, we may initially just have one option which allows the
  user to enable vibrations, and is off by default. That's all that is needed
  for it to work, the API knows enough to load and save the value behind the scenes.

  In the next iteration we may need a user name and age to be entered.

  \qml
    import QtQuick 2.0
    import Ubuntu.Components 0.1

    MainView {
        applicationName: "example"
        width: units.gu(80)
        height: units.gu(60)

        Settings {
            Option {
                id: optionName
                name: "name"
                defaultValue: "Jane Doe"
            }
            Option {
                id: optionAge
                name: "age"
                defaultValue: 99
            }
        }

		Page {
			title: i18n.tr('Fill in user profile')
			Column {
				TextField {
					action: optionName
				}
				TextField {
					action: optionAge
				}
			}
		}
    }
  \endqml

  Again all we need to define is a name and a default value and rely on the fact
  that every Option is an Action.

  How about using those values now to decide if the user is old enough to play a
  hypothetical game? In this example we assume the age of majority is 18.

  \qml
    import QtQuick 2.0
    import Ubuntu.Components 0.1

    import QtQuick 2.0
    import Ubuntu.Components 0.1

    MainView {
        applicationName: "example"
        width: units.gu(80)
        height: units.gu(60)

		Column {
			Label {
				text: i18n.tr("Name: %1").arg(optionName.value)
			}
			Label {
				text: i18n.tr("Age: %1").arg(optionAge.value)
			}
			Button {
				text: i18n.tr("Start playing")
				onClicked: {
					if (optionAge.value < 18)
						console.log("Sorry but this game is for adults.")
					else
						console.log("Game started by the looks of it")
				}
			}
		}
	}
  \endqml

  Note that there's no need to worry about the default values here - the
  value reflects the saved or default automatically.

  Let's try choosing a value from several choices where the user must choose
  among mobile data options, of course we make the most expensive the default.

  \qml
    import QtQuick 2.0
    import Ubuntu.Components 0.1

    MainView {
        applicationName: "example"
        width: units.gu(80)
        height: units.gu(60)

        Settings {
            Option {
                name: "plan"
                defaultValue: 2
            }
            OptionSelector {
                action: optionPlan
                model: [ "500M", "5G data", "unlimited (really 10G data)" ]
            }
        }
        Button {
            text: i18n.tr("Start p(l)aying")
            onClicked: {
                if (optionPlan.value == 0)
                    console.log("Are you sure you don't need more?")
                else
                    console.log("Good choice, sir")
            }
        }
    }
  \endqml

  As our app is starting to get really big let's use some grouping. We didn't
  set a group before so everything went into the "default" group.

  \qml
    import QtQuick 2.0
    import Ubuntu.Components 0.1

    MainView {
        applicationName: "example"
        width: units.gu(80)
        height: units.gu(60)

        Settings {
            group: "browser"
            Option {
                id: optionUrl
                name: "homepage"
                defaultValue: "http://www.duckduckgo.com"
            }
        }

		Page {
			title: i18n.tr("Set the homepage")
			TextField {
				action: optionUrl
			}
		}
    }
  \endqml

  As we have more specialized use cases we find that there's no standard
  component for choosing a type of noodles, so let's invent a PastaPicker:

  \qml
    import QtQuick 2.0
    import Ubuntu.Components 0.1

    MainView {
        applicationName: "example"
        width: units.gu(80)
        height: units.gu(60)

        Settings {
            group: "pasta"
            Option {
                id: optionNoodles
                name: "noodles"
                defaultValue: "rigatoni"
			}
		}

		Page {
			title: i18n.tr("Preferred type of pasta")

			PastaPicker {
				action: optionNoodles
			}
		}
    }
  \endqml

  Now for the implementation of the component:

  \qml
    import QtQuick 2.0
    import Ubuntu.Components 0.1

    ActionItem {
        id: picker

        Column {
            id: col
            property string choice: action && action.hasOwnProperty("value") && typeof action.value != "undefined" ? action.value : ""

            Label {
                text: i18n.tr('Recommendation: %1'.arg(action.value))
            }
            Label {
                text: i18n.tr('As long as possible')
            }
            Switch {
                checked: col.choice == 'spaghetti'
                onTriggered: picker.action.value = checked ? 'spaghetti' : 'penne'
            }
        }
    }
  \endqml
*/

